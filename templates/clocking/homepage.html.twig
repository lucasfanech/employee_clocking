{% extends 'base.html.twig' %}
{% block body %}


    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-9">
                <h5>
                    {{ message2 }}
                </h5>

                <form id="saveForm" action="{{ path('clocking_save',{'year':year ,'week': week }) }}" method="POST"></form>
                <form id="dayOffForm" action="{{ path('dayOff', {'year': year, 'week': week }) }}" method="POST"></form>

                <table class="table table-striped table-hover">
                    <thead>
                    <tr>
                        <th>Day</th>
                        <th>Morning</th>
                        <th>Lunch</th>
                        <th>Afternoon</th>
                        <th>Evening</th>
                        <th>+/-</th>
                        <th>Cumulated</th>
                        <th>Day OFF</th>
                    </tr>
                    </thead>

                    <tbody>


                    {% for day in days %}
                        {% if daysOff[loop.index0] == 0 %}
                            <tr id="tr_{{ loop.index0 }}">
                                <td><h2>{{ day.name }}</h2><span>{{ day.date }}</span></td>
                                <td><input form="saveForm" type="time" id="c1_{{ loop.index0 }}" name="c1_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Morning }}"></td>
                                <td><input form="saveForm" type="time" id="c2_{{ loop.index0 }}" name="c2_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Lunch }}"></td>
                                <td><input form="saveForm" type="time" id="c3_{{ loop.index0 }}" name="c3_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Afternoon }}"></td>
                                <td><input form="saveForm" type="time" id="c4_{{ loop.index0 }}" name="c4_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Evening }}"></td>
                                <td id="timeLeft_{{ loop.index0 }}">X</td>
                                <td id="cumulated_{{ loop.index0 }}">X</td>
                                <td>
                                    <button form="dayOffForm" type="submit" id="dayOff_{{ loop.index0 }}" name="dayOffBtn" value="{{ loop.index0 }}" class="btn btn-outline-danger" >
                                        <i class="fa-solid fa-calendar-xmark"></i>
                                    </button>

                                </td>
                            </tr>
                        {% elseif daysOff[loop.index0] == 1 %}
                            <tr class="table-dark" id="tr_{{ loop.index0 }}">
                                <td><h2>{{ day.name }}</h2><span>{{ day.date }}</span> | <span class="badge text-bg-warning">Day OFF</span></td>
                                <td><input form="saveForm" type="time" id="c1_{{ loop.index0 }}" name="c1_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Morning }}" disabled></td>
                                <td><input form="saveForm" type="time" id="c2_{{ loop.index0 }}" name="c2_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Lunch }}" disabled></td>
                                <td><input form="saveForm" type="time" id="c3_{{ loop.index0 }}" name="c3_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Afternoon }}" disabled></td>
                                <td><input form="saveForm" type="time" id="c4_{{ loop.index0 }}" name="c4_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Evening }}" disabled></td>
                                <td id="timeLeft_{{ loop.index0 }}">X</td>
                                <td id="cumulated_{{ loop.index0 }}">X</td>
                                <td>
                                    <button form="dayOffForm" type="submit" id="dayOff_{{ loop.index0 }}" name="dayOffBtn" value="{{ loop.index0 }}" class="btn btn-outline-warning" >
                                        <i class="fa-solid fa-calendar-plus"></i>
                                    </button>

                                </td>
                            </tr>
                        {% endif %}

                    {% endfor %}

                    </tbody>

                </table>

                <button form="saveForm" class="btn btn-primary" type="submit" name="submit">Save</button>

                {% for message in app.flashes('success') %}
                    <div class="alert alert-success">
                        {{ message }}
                    </div>
                {% endfor %}
                <div class="alert-success" id="dump"></div>
            </div>
            <div class="col-xl ">
                <div class="card text-bg-light " >
                    <div class="card-header text-center">
                        <h3>
                            <a href="{{ path('home',{'year': year, 'week': week-1}) }}"><i class="fa-solid fa-angles-left"></i></a>
                            {{ message }}
                            <a href="{{ path('home',{'year': year, 'week': week+1}) }}"><i class="fa-solid fa-angles-right"></i></a>


                        </h3>
                        </div>

                    <div class="card-body">
                        <h5 class="card-title">Estimation of the time left for the day


                        </h5>
                        <div class="btn-group d-flex">
                            <a class="btn btn-primary active">
                                <h3 id="endOfDay">
                                    {# if todayLeavingTime is defined #}
                                    {% if todayLeavingTime.date is defined %}
                                        {{ todayLeavingTime|date("H:i") }}
                                    {% else %}
                                        <i class="fa-regular fa-circle-question"></i>
                                    {% endif %}
                                </h3>
                                <div class="badge bg-light text-wrap text-dark text-bold" style="">
                                    End of the day
                                </div>
                            </a>
                            <a class="btn btn-primary">
                                <h3 id="endOfWeek"><i class="fa-regular fa-circle-question"></i></h3>
                                <div class="badge bg-black text-wrap" style="">
                                    Cumulated
                                </div>
                            </a>
                        </div>
                        <!--- alert box -->
                        {% if todayMessage is defined and todayMessage != "" %}
                        <div class="alert alert-warning mt-5" role="alert">
                            <h4 class="alert-heading">Warning!</h4>

                            <p>{{ todayMessage }}</p>

                            <hr>
                            <p class="mb-0">If you are late, you should work more to catch up.</p>
                        </div>
                        {% endif %}
                    </div>
                    <div class="card-footer ">
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a href="{{ path('configPage') }}">
                                <i class="fa-solid fa-gear"></i>
                            </a>
                        </div>
                    </div>
                </div>
                <!-- Button trigger modal -->
                <div class="text-center">
                    <button type="button" class="mt-5 btn btn-primary"  data-bs-toggle="modal" data-bs-target="#gameModal">
                        <i class="fa-solid fa-egg fa-beat fa-fade"></i> Surprise!
                    </button>
                </div>
                <!-- Modal -->
                <div class="modal fade" id="gameModal" tabindex="-1" aria-labelledby="gameModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                    <div class="modal-dialog modal-dialog-centered modal-xl">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h1 class="modal-title fs-5" id="gameModalLabel">Easter Egg - Chatbot AI</h1>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div id="chatbot" class="col-md-4 d-flex flex-column h-100" style="">
                                    <div class="container mt-5">
                                        <div class="chat-area" id="chat-area">
                                        </div>
                                        <div class="input-group mb-3">
                                            <input type="text" class="form-control" id="message-input" placeholder="Discuter avec iTask...">
                                            <button class="btn btn-primary" id="send-btn" type="button">Send</button>
                                        </div>
                                        <button class="btn btn-danger" id="clear-btn" type="button">Clear session</button>
                                    </div>
                                </div>
                                <script>
                                    $(document).ready(function() {
                                        conversation_id = uuidv4();


                                        $('#send-btn').click(function() {
                                            var message = $('#message-input').val();
                                            if (message.trim() === '') {
                                                return;  // Ignore empty messages
                                            }

                                            // Add the user's message to the chat area
                                            $('#chat-area').append('<div class="d-flex justify-content-end mb-2"><div class="p-2 border bg-light rounded-pill">' + message + '</div></div>');

                                            // Scroll to the bottom of the chat area
                                            $('#chat-area').animate({ scrollTop: $('#chat-area')[0].scrollHeight }, 1000);

                                            // Clear the input field
                                            $('#message-input').val('');

                                            // Send the message to the server and get the assistant's response
                                            $.ajax({
                                                type: 'POST',
                                                url: '/chat',
                                                data: JSON.stringify({ message: message, conversation_id: conversation_id }),
                                                contentType: 'application/json;charset=UTF-8',
                                                dataType: 'json',
                                                success: function(data) {
                                                    var response = data.response;

                                                    // Add the assistant's response to the chat area
                                                    $('#chat-area').append('<div class="d-flex justify-content-start mb-2"><div class="p-2 border bg-primary rounded-5 text-white">' + response + '</div></div>');

                                                    // Scroll to the bottom of the chat area
                                                    $('#chat-area').animate({ scrollTop: $('#chat-area')[0].scrollHeight }, 1000);
                                                },
                                                error: function(jqXHR, textStatus, errorThrown) {
                                                    console.log(textStatus + ': ' + errorThrown);
                                                    console.log(jqXHR.responseText);
                                                }
                                            });
                                        });

                                        function uuidv4() {
                                            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                                                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                                            );
                                        }

                                        $('#clear-btn').click(function() {
                                            // Effacer l'UUID de la conversation du stockage local
                                            conversation_id = uuidv4();

                                            // Effacer les messages de la zone de discussion
                                            $('#chat-area').empty();
                                        });
                                    });

                                </script>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>

    <script>
        // twig
        var days = {{ exceptionDays|json_encode|raw }};
        var lunchBreakTime = "{{ lunchBreakTime|date('H:i') }}";
        var hoursToDoInWeek = "{{ hoursToDoInWeek }}";
        var exceptionTime = "{{ exceptionTime|date('H:i') }}";
        var week = "{{ week }}";

        // on load
        $(document).ready(function() {
            for (var i = 0; i < days.length; i++) {
                calculateTime(i, hoursToDoInWeek, lunchBreakTime, days[i], exceptionTime);
            }
            endOfTheDay(week, lunchBreakTime, days, exceptionTime, hoursToDoInWeek);
            // get all the inputs starting with "c"
            for (var da = 0; da < days.length; da++) {

                // get inputs finishing with "_d"
                var inputs = document.querySelectorAll('input[id^="c"][id$="_' + da + '"]');
                for (var j = 0; j < inputs.length; j++) {
                    console.log('input id: ' + inputs[j].id + ' attribution jour '+ da);
                    inputs[j].addEventListener('change', function() {
                        var id = this.id;
                        var day = id.substr(id.length - 1);
                        calculateTime(day, hoursToDoInWeek, lunchBreakTime, days[day], exceptionTime);
                        endOfTheDay(week, lunchBreakTime, days[day], exceptionTime, hoursToDoInWeek);
                    });
                }

            }
        });

        function endOfTheDay(week, lunchBreakTime, exceptionWeek, exceptionTime, hoursToDoInWeek){

            var day = new Date().getDay();

            // ---- Cumulated
            // check if cumulated_X is existing (X actual day -1)
            if (document.getElementById("cumulated_"+(day-2)) != null) {
                var previousCumulated = document.getElementById("cumulated_"+(day-2)).innerHTML;

                // if previousCumulated is equal to "X"
                if (previousCumulated == "X") {
                    // we will loop from day-2 to 0 unti lI find document.getElementById("cumulated_"+(X-2)) != null or != "X"
                    for (var i = (day-2); i >= 0; i--) {
                        if (document.getElementById("cumulated_"+i) != null && document.getElementById("cumulated_"+i).innerHTML != "X") {
                            previousCumulated = document.getElementById("cumulated_"+i).innerHTML;
                            break;
                        }
                    }

                }

                if (previousCumulated != "X") {
                   console.log('previousCumulated: ' + previousCumulated);
                   // get the "+" or "-" sign
                    var negative = false;

                    if (previousCumulated.indexOf("-") > -1) {
                        // if yes, remove it
                        negative = true;
                    }

                    var previousCumulated = previousCumulated.split(":");
                    var previousCumulated = parseInt(previousCumulated[0]) * 60 + parseInt(previousCumulated[1]);
                    var timeLeft = document.getElementById("endOfDay").innerHTML;
                    timeLeft = timeLeft.split(":");
                    timeLeft = parseInt(timeLeft[0]) * 60 + parseInt(timeLeft[1]);
                    if (negative) {
                        timeLeft = timeLeft * -1;
                        cumulated = previousCumulated - timeLeft;
                    }else {
                        timeLeft = timeLeft;
                        cumulated = timeLeft - previousCumulated;
                        console.log('cumulated: ' + cumulated, 'previousCumulated: ' + previousCumulated, 'timeLeft: ' + timeLeft);
                    }
                    // if cumulated is a valid number
                    if (cumulated > 0) {
                        document.getElementById("endOfWeek").innerHTML = convertMinToTime(cumulated);
                    }

                }
            }
        }

        function calculateTime(day, toDoWeek, lunchBreakTime, exceptionWeek, exceptionTime) {
            // convert lunchBreakTime to minutes
            lunchBreakTime = lunchBreakTime.split(":");
            lunchBreakTime = parseInt(lunchBreakTime[0]) * 60 + parseInt(lunchBreakTime[1]);
            // convert exceptionTime to minutes
            exceptionTime = exceptionTime.split(":");
            exceptionTime = parseInt(exceptionTime[0]) * 60 + parseInt(exceptionTime[1]);

            console.log('day: ' + day);





            // get the values of c1, c2, c3, c4
            var c1 = document.getElementById("c1_"+day).value;
            var c2 = document.getElementById("c2_"+day).value;
            var c3 = document.getElementById("c3_"+day).value;
            var c4 = document.getElementById("c4_"+day).value;

            // if c1, c2, c3, c4 are not empty
            if (c1 != "" && c2 != "" && c3 != "" && c4 != "") {

                // convert the values of c1, c2, c3, c4 to minutes
                c1 = c1.split(":");
                c2 = c2.split(":");
                c3 = c3.split(":");
                c4 = c4.split(":");
                var c1Minutes = parseInt(c1[0]) * 60 + parseInt(c1[1]);
                var c2Minutes = parseInt(c2[0]) * 60 + parseInt(c2[1]);
                var c3Minutes = parseInt(c3[0]) * 60 + parseInt(c3[1]);
                var c4Minutes = parseInt(c4[0]) * 60 + parseInt(c4[1]);


                // toDoDay = toDoWeek / 5
                //TO DO: check if the day is off, count the number of days off in the week
                // convert toDoWeek to minutes
                toDoWeek = toDoWeek.split(":");
                toDoWeek = (+toDoWeek[0]) * 60 + (+toDoWeek[1]);

                var toDoDay = toDoWeek / 5;

                // calculate the time left
                var timeLeft = (c4Minutes - c3Minutes) + (c2Minutes - c1Minutes) - toDoDay;


                // if exceptionWeek = 1, timeLeft = timeLeft - (exceptionTime - (c3Minutes - c2Minutes));
                    // if afternoon - lunch < lunchBreakTime, timeLeft = timeLeft + lunchBreakTime - (c3Minutes - c2Minutes)
                if (exceptionWeek == 1) {
                    if ((c3Minutes - c2Minutes) < exceptionTime) {
                        timeLeft = timeLeft - (exceptionTime - (c3Minutes - c2Minutes));
                    }

                } else {
                    if ((c3Minutes - c2Minutes) < lunchBreakTime) {
                        timeLeft = timeLeft - (lunchBreakTime - (c3Minutes - c2Minutes));
                    }
                }

                // convert timeLeft to HH:MM format and display the time left
                document.getElementById("timeLeft_"+day).innerHTML = convertMinToTime(timeLeft);

            }

            // ---- Cumulated

            // get the values of timeLeft_0, timeLeft_1, timeLeft_2, timeLeft_3, timeLeft_4 split them into hours and minutes
            var getTimeLeft = [];
            var cumulatedTimeLeft = 0;
            for (var i = 0; i < 5; i++) {

                var timeLeft = document.getElementById("timeLeft_"+i).innerHTML;
                if (timeLeft != "" && timeLeft != "X") {
                    // check if "-" is present in timeLeft
                    var negative = false;
                    if (timeLeft.indexOf("-") > -1) {
                        // if yes, remove it
                        negative = true;
                    }

                    timeLeft = timeLeft.split(":");
                    var timeLeftHours = parseInt(timeLeft[0]);
                    var timeLeftMinutes = parseInt(timeLeft[1]);
                    if (negative) {
                        timeLeftMinutes = timeLeftMinutes * -1;
                    }
                    getTimeLeft[i] = timeLeftHours * 60 + timeLeftMinutes;
                    cumulatedTimeLeft = cumulatedTimeLeft + getTimeLeft[i];

                    document.getElementById("cumulated_"+i).innerHTML = convertMinToTime(cumulatedTimeLeft);


                }
            }

        }

        // convert minutes to Time HH:MM format
        function convertMinToTime(timeLeft){
            var timeLeftHours = timeLeft / 60;
            var rtimeLeftHours = Math.floor(timeLeftHours);
            var timeLeftMinutes = (timeLeftHours - rtimeLeftHours) * 60;
            var rtimeLeftMinutes = Math.round(timeLeftMinutes);

            if (rtimeLeftHours  < 0) {
                rtimeLeftHours = rtimeLeftHours + 1;
                rtimeLeftMinutes = 60 - rtimeLeftMinutes;
            }
            if (rtimeLeftMinutes < 10) {
                rtimeLeftMinutes = "0" + rtimeLeftMinutes;
            }
            if (timeLeft < 0) {
                if (rtimeLeftHours === 0) {
                    rtimeLeftHours = "-" + rtimeLeftHours;
                }

            }
            var out = rtimeLeftHours + ":" + rtimeLeftMinutes;
            return out;
        }





    </script>
{% endblock %}