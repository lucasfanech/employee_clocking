{% extends 'base.html.twig' %}
{% block body %}
    <h1>{{ message }}</h1>

    <div class="container-fluid">
        <h1>
            Info: {{ message2 }}
        </h1>
        <a href="{{ path('home',{'year': year, 'week': week-1}) }}">Previous week</a>
        <a href="{{ path('home',{'year': year, 'week': week+1}) }}">Next week</a>
        <form action="{{ path('clocking_save',{'year':year ,'week': week }) }}" method="POST">
        <table class="table table-striped table-hover">
            <thead>
            <tr>
                <th>Day</th>
                <th>Morning</th>
                <th>Lunch</th>
                <th>Afternoon</th>
                <th>Evening</th>
                <th>+/-</th>
                <th>Cumulated</th>
                <th>Day OFF</th>
            </tr>
            </thead>

            <tbody>


                {% for day in days %}
                    <tr>
                        <td><h2>{{ day.name }}</h2><span>{{ day.date }}</span></td>
                        <td><input type="time" id="c1_{{ loop.index0 }}" name="c1_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Morning }}"></td>
                        <td><input type="time" id="c2_{{ loop.index0 }}" name="c2_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Lunch }}"></td>
                        <td><input type="time" id="c3_{{ loop.index0 }}" name="c3_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Afternoon }}"></td>
                        <td><input type="time" id="c4_{{ loop.index0 }}" name="c4_{{ loop.index0 }}" class="form-control" placeholder="Select time" value="{{ day.Evening }}"></td>
                        <td id="timeLeft_{{ loop.index0 }}">X</td>
                        <td id="cumulated_{{ loop.index0 }}">X</td>
                        <td id="dayOff_{{ loop.index0 }}">X</td>
                    </tr>
                {% endfor %}

            </tbody>

        </table>
            <button class="btn btn-primary" type="submit" name="submit">Save</button>
        </form>
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ message }}
            </div>
        {% endfor %}
        <div class="alert-success" id="dump"></div>
    </div>

    <script>
        // twig
        var days = {{ exceptionDays|json_encode|raw }};
        var lunchBreakTime = "{{ lunchBreakTime|date('H:i') }}";
        var hoursToDoInWeek = "{{ hoursToDoInWeek }}";
        var exceptionTime = "{{ exceptionTime|date('H:i') }}";

        // on load
        $(document).ready(function() {
            for (var i = 0; i < days.length; i++) {
                calculateTime(i, hoursToDoInWeek, lunchBreakTime, days[i], exceptionTime);
            }

            // get all the inputs starting with "c"
            for (var da = 0; da < days.length; da++) {

                // get inputs finishing with "_d"
                var inputs = document.querySelectorAll('input[id^="c"][id$="_' + da + '"]');
                for (var j = 0; j < inputs.length; j++) {
                    console.log('input id: ' + inputs[j].id + ' attribution jour '+ da);
                    inputs[j].addEventListener('change', function() {
                        var id = this.id;
                        var day = id.substr(id.length - 1);
                        calculateTime(day, hoursToDoInWeek, lunchBreakTime, days[day], exceptionTime);
                    });
                }

            }
        });



        function calculateTime(day, toDoWeek, lunchBreakTime, exceptionWeek, exceptionTime) {
            // convert lunchBreakTime to minutes
            lunchBreakTime = lunchBreakTime.split(":");
            lunchBreakTime = parseInt(lunchBreakTime[0]) * 60 + parseInt(lunchBreakTime[1]);
            // convert exceptionTime to minutes
            exceptionTime = exceptionTime.split(":");
            exceptionTime = parseInt(exceptionTime[0]) * 60 + parseInt(exceptionTime[1]);

            console.log('day: ' + day);





            // get the values of c1, c2, c3, c4
            var c1 = document.getElementById("c1_"+day).value;
            var c2 = document.getElementById("c2_"+day).value;
            var c3 = document.getElementById("c3_"+day).value;
            var c4 = document.getElementById("c4_"+day).value;

            // if c1, c2, c3, c4 are not empty
            if (c1 != "" && c2 != "" && c3 != "" && c4 != "") {

                // convert the values of c1, c2, c3, c4 to minutes
                c1 = c1.split(":");
                c2 = c2.split(":");
                c3 = c3.split(":");
                c4 = c4.split(":");
                var c1Minutes = parseInt(c1[0]) * 60 + parseInt(c1[1]);
                var c2Minutes = parseInt(c2[0]) * 60 + parseInt(c2[1]);
                var c3Minutes = parseInt(c3[0]) * 60 + parseInt(c3[1]);
                var c4Minutes = parseInt(c4[0]) * 60 + parseInt(c4[1]);


                // toDoDay = toDoWeek / 5
                //TO DO: check if the day is off, count the number of days off in the week
                // convert toDoWeek to minutes
                toDoWeek = toDoWeek.split(":");
                toDoWeek = (+toDoWeek[0]) * 60 + (+toDoWeek[1]);

                var toDoDay = toDoWeek / 5;

                // calculate the time left
                var timeLeft = (c4Minutes - c3Minutes) + (c2Minutes - c1Minutes) - toDoDay;


                // if exceptionWeek = 1, timeLeft = timeLeft - (exceptionTime - (c3Minutes - c2Minutes));
                    // if afternoon - lunch < lunchBreakTime, timeLeft = timeLeft + lunchBreakTime - (c3Minutes - c2Minutes)
                if (exceptionWeek == 1) {
                    if ((c3Minutes - c2Minutes) < exceptionTime) {
                        timeLeft = timeLeft - (exceptionTime - (c3Minutes - c2Minutes));
                    }

                } else {
                    if ((c3Minutes - c2Minutes) < lunchBreakTime) {
                        timeLeft = timeLeft - (lunchBreakTime - (c3Minutes - c2Minutes));
                    }
                }



                // convert timeLeft to HH:MM format
                var timeLeftHours = timeLeft / 60;
                var rtimeLeftHours = Math.floor(timeLeftHours);
                var timeLeftMinutes = (timeLeftHours - rtimeLeftHours) * 60;
                var rtimeLeftMinutes = Math.round(timeLeftMinutes);

                if (rtimeLeftHours  < 0) {
                    rtimeLeftHours = rtimeLeftHours + 1;
                    rtimeLeftMinutes = 60 - rtimeLeftMinutes;
                }
                if (rtimeLeftMinutes < 10) {
                    rtimeLeftMinutes = "0" + rtimeLeftMinutes;
                }
                if (timeLeft < 0) {
                    if (rtimeLeftHours === 0) {
                        rtimeLeftHours = "-" + rtimeLeftHours;
                    }

                }
                timeLeft = rtimeLeftHours + ":" + rtimeLeftMinutes;

                // display the time left
                document.getElementById("timeLeft_"+day).innerHTML = timeLeft;

            }


            // ---- Cumulated

            // get the values of timeLeft_0, timeLeft_1, timeLeft_2, timeLeft_3, timeLeft_4 split them into hours and minutes
            // var getTimeLeft = array();
            // var cumulatedTimeLeft = 0;
            // for (var i = 0; i < 5; i++) {
            //
            //     var timeLeft = document.getElementById("timeLeft_"+i).innerHTML;
            //     if (timeLeft != "" && timeLeft != "X") {
            //         timeLeft = timeLeft.split(":");
            //         var timeLeftHours = parseInt(timeLeft[0]);
            //         var timeLeftMinutes = parseInt(timeLeft[1]);
            //         if (timeLeftHours < 0) {
            //             timeLeftMinutes = timeLeftMinutes * -1;
            //         }
            //         getTimeLeft[i] = timeLeftHours * 60 + timeLeftMinutes;
            //         cumulatedTimeLeft = cumulatedTimeLeft + getTimeLeft[i];
            //
            //         document.getElementById("cumulated_"+i).innerHTML = cumulatedTimeLeft;
            //
            //
            //     }
            // }








        }



    </script>
{% endblock %}